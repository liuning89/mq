<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.0.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
    http://www.springframework.org/schema/util 
    http://www.springframework.org/schema/util/spring-util-4.0.xsd">
	<!-- 扫描文件（自动注入）,包括DAO层注入Service层，Service层注入Controller层 -->
	<context:component-scan base-package="com.wy"/>

	<aop:aspectj-autoproxy />
	
	<!--本示例采用DBCP连接池。 连接池配置如下 -->
	<bean id="dataSource" class="com.wy.mq.ltndatesource.LTNDataSource">
		<property name="driverClassName" value="${jdbc_driverClassName}" />
		<property name="url" value="${jdbc_url_rw}" />
		<property name="username" value="${jdbc_username_rw}" />
		<property name="password" value="${jdbc_password_rw}" />
		<!-- 		当这个池被启动时初始化的创建的连接个数，起始生效版本：1.2 -->
        <property name="initialSize" value="10" />
		<!--         	可以在这个池中同时被分配的有效连接数的最大值，如设置为负数，则不限制 -->
        <property name="maxTotal" value="20" />
		<!--         可以在池中保持空闲的最大连接数，超出设置值之外的空闲连接将被回收，如设置为负数，则不限制 -->
        <property name="maxIdle" value="20" />
		<!--         可以在池中保持空闲的最小连接数，超出设置值之外的空闲连接将被创建，如设置为0，则不创建 -->
        <property name="minIdle" value="20" />
	</bean>

	<!-- mybatis文件配置，扫描所有mapper文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
		p:dataSource-ref="dataSource" p:configLocation="classpath:mybatis-config.xml"
		p:mapperLocations="classpath:mapper/*.xml" />


	<!-- spring与mybatis整合配置，扫描所有dao ,生成与DAO类相同名字的bean（除了首字母小写）-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
		p:basePackage="com.wy.mq.dao" p:sqlSessionFactoryBeanName="sqlSessionFactory" />

	<!-- 对数据源进行事务管理 -->
	
	<aop:config expose-proxy="true">
		<aop:pointcut id="txPointcut" expression="execution(* com.wy.mq.*.service..*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
	</aop:config>

	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>

	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="do*" propagation="REQUIRED"  rollback-for="Exception"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="remove" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="sendOk" propagation="REQUIRED" rollback-for="Exception"/>
<!-- 			<tx:method name="lockConsumed" propagation="REQUIRED"  rollback-for="Exception"/> -->
		</tx:attributes>
	</tx:advice>
</beans>